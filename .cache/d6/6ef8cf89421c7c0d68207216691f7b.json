{"id":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","dependencies":[{"name":"/Users/steve/Documents/Projects/notedly_app/web/package.json","includedInParent":true,"mtime":1634558757028},{"name":"/Users/steve/Documents/Projects/notedly_app/web/.babelrc","includedInParent":true,"mtime":1634038347786},{"name":"/Users/steve/Documents/Projects/notedly_app/web/node_modules/mdast-util-definitions/node_modules/unist-util-visit/package.json","includedInParent":true,"mtime":1634309499463},{"name":"unist-util-visit-parents","loc":{"line":27,"column":49},"parent":"/Users/steve/Documents/Projects/notedly_app/web/node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","resolved":"/Users/steve/Documents/Projects/notedly_app/web/node_modules/unist-util-visit-parents/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"CONTINUE\", {\n  enumerable: true,\n  get: function () {\n    return _unistUtilVisitParents.CONTINUE;\n  }\n});\nObject.defineProperty(exports, \"EXIT\", {\n  enumerable: true,\n  get: function () {\n    return _unistUtilVisitParents.EXIT;\n  }\n});\nObject.defineProperty(exports, \"SKIP\", {\n  enumerable: true,\n  get: function () {\n    return _unistUtilVisitParents.SKIP;\n  }\n});\nexports.visit = void 0;\n\nvar _unistUtilVisitParents = require(\"unist-util-visit-parents\");\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Invoked when a node (matching test, if given) is found.\n * Visitors are free to transform node.\n * They can also transform the parent of node (the last of ancestors).\n * Replacing node itself, if `SKIP` is not returned, still causes its descendants to be visited.\n * If adding or removing previous siblings (or next siblings, in case of reverse) of node,\n * visitor should return a new index (number) to specify the sibling to traverse after node is traversed.\n * Adding or removing next siblings of node (or previous siblings, in case of reverse)\n * is handled as expected without needing to return a new index.\n * Removing the children property of an ancestor still results in them being traversed.\n *\n * @template {Node} V\n * @callback Visitor\n * @param {V} node Found node\n * @param {number|null} index Position of `node` in `parent`\n * @param {Parent|null} parent Parent of `node`\n * @returns {VisitorResult}\n */\nconst visit =\n/**\n * @type {(\n *   (<T extends Node>(tree: Node, test: T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>|Array.<T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>>, visitor: Visitor<T>, reverse?: boolean) => void) &\n *   ((tree: Node, test: Test, visitor: Visitor<Node>, reverse?: boolean) => void) &\n *   ((tree: Node, visitor: Visitor<Node>, reverse?: boolean) => void)\n * )}\n */\n\n/**\n * Visit children of tree which pass a test\n *\n * @param {Node} tree Abstract syntax tree to walk\n * @param {Test} test test Test node\n * @param {Visitor<Node>} visitor Function to run for each node\n * @param {boolean} [reverse] Fisit the tree in reverse, defaults to false\n */\nfunction (tree, test, visitor, reverse) {\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor;\n    visitor = test;\n    test = null;\n  }\n\n  (0, _unistUtilVisitParents.visitParents)(tree, test, overload, reverse);\n  /**\n   * @param {Node} node\n   * @param {Array.<Parent>} parents\n   */\n\n  function overload(node, parents) {\n    var parent = parents[parents.length - 1];\n    return visitor(node, parent ? parent.children.indexOf(node) : null, parent);\n  }\n};\n\nexports.visit = visit;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":26,"column":0},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":27,"column":0}},{"generated":{"line":28,"column":0},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":1,"column":0}},{"generated":{"line":35,"column":0},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":8,"column":0}},{"generated":{"line":53,"column":0},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":31,"column":7}},{"name":"visit","generated":{"line":53,"column":6},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":31,"column":13}},{"generated":{"line":53,"column":11},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":31,"column":18}},{"generated":{"line":54,"column":0},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":32,"column":2}},{"generated":{"line":62,"column":0},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":40,"column":4}},{"generated":{"line":70,"column":0},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":48,"column":4}},{"name":"tree","generated":{"line":70,"column":10},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":48,"column":14}},{"generated":{"line":70,"column":14},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":48,"column":4}},{"name":"test","generated":{"line":70,"column":16},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":48,"column":20}},{"generated":{"line":70,"column":20},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":48,"column":4}},{"name":"visitor","generated":{"line":70,"column":22},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":48,"column":26}},{"generated":{"line":70,"column":29},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":48,"column":4}},{"name":"reverse","generated":{"line":70,"column":31},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":48,"column":35}},{"generated":{"line":70,"column":38},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":48,"column":4}},{"generated":{"line":70,"column":40},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":48,"column":44}},{"generated":{"line":71,"column":0},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":49,"column":6}},{"generated":{"line":71,"column":6},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":49,"column":10}},{"name":"test","generated":{"line":71,"column":13},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":49,"column":17}},{"generated":{"line":71,"column":17},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":49,"column":10}},{"generated":{"line":71,"column":22},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":49,"column":26}},{"generated":{"line":71,"column":32},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":49,"column":10}},{"generated":{"line":71,"column":36},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":49,"column":40}},{"name":"visitor","generated":{"line":71,"column":43},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":49,"column":47}},{"generated":{"line":71,"column":50},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":49,"column":40}},{"generated":{"line":71,"column":55},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":49,"column":59}},{"generated":{"line":71,"column":65},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":49,"column":6}},{"generated":{"line":71,"column":67},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":49,"column":71}},{"name":"reverse","generated":{"line":72,"column":0},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":50,"column":8}},{"name":"reverse","generated":{"line":72,"column":4},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":50,"column":8}},{"generated":{"line":72,"column":11},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":50,"column":15}},{"name":"visitor","generated":{"line":72,"column":14},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":50,"column":18}},{"generated":{"line":72,"column":21},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":50,"column":8}},{"name":"visitor","generated":{"line":73,"column":0},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":51,"column":8}},{"name":"visitor","generated":{"line":73,"column":4},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":51,"column":8}},{"generated":{"line":73,"column":11},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":51,"column":15}},{"name":"test","generated":{"line":73,"column":14},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":51,"column":18}},{"generated":{"line":73,"column":18},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":51,"column":8}},{"name":"test","generated":{"line":74,"column":0},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":52,"column":8}},{"name":"test","generated":{"line":74,"column":4},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":52,"column":8}},{"generated":{"line":74,"column":8},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":52,"column":12}},{"generated":{"line":74,"column":11},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":52,"column":15}},{"generated":{"line":74,"column":15},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":52,"column":8}},{"generated":{"line":75,"column":0},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":53,"column":7}},{"generated":{"line":77,"column":0},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":55,"column":6}},{"name":"tree","generated":{"line":77,"column":43},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":55,"column":19}},{"generated":{"line":77,"column":47},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":55,"column":6}},{"name":"test","generated":{"line":77,"column":49},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":55,"column":25}},{"generated":{"line":77,"column":53},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":55,"column":6}},{"name":"overload","generated":{"line":77,"column":55},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":55,"column":31}},{"generated":{"line":77,"column":63},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":55,"column":6}},{"name":"reverse","generated":{"line":77,"column":65},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":55,"column":41}},{"generated":{"line":77,"column":72},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":55,"column":6}},{"generated":{"line":78,"column":0},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":57,"column":6}},{"generated":{"line":83,"column":0},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":61,"column":6}},{"name":"overload","generated":{"line":83,"column":11},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":61,"column":15}},{"generated":{"line":83,"column":19},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":61,"column":6}},{"name":"node","generated":{"line":83,"column":20},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":61,"column":24}},{"generated":{"line":83,"column":24},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":61,"column":6}},{"name":"parents","generated":{"line":83,"column":26},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":61,"column":30}},{"generated":{"line":83,"column":33},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":61,"column":6}},{"generated":{"line":83,"column":35},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":61,"column":39}},{"generated":{"line":84,"column":0},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":62,"column":8}},{"name":"parent","generated":{"line":84,"column":8},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":62,"column":12}},{"generated":{"line":84,"column":14},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":62,"column":18}},{"name":"parents","generated":{"line":84,"column":17},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":62,"column":21}},{"generated":{"line":84,"column":24},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":62,"column":28}},{"name":"parents","generated":{"line":84,"column":25},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":62,"column":29}},{"generated":{"line":84,"column":32},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":62,"column":36}},{"name":"length","generated":{"line":84,"column":33},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":62,"column":37}},{"generated":{"line":84,"column":39},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":62,"column":29}},{"generated":{"line":84,"column":42},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":62,"column":46}},{"generated":{"line":84,"column":43},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":62,"column":28}},{"generated":{"line":84,"column":44},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":62,"column":8}},{"generated":{"line":85,"column":0},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":63,"column":8}},{"name":"visitor","generated":{"line":85,"column":11},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":63,"column":15}},{"generated":{"line":85,"column":18},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":63,"column":22}},{"name":"node","generated":{"line":85,"column":19},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":64,"column":10}},{"generated":{"line":85,"column":23},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":63,"column":22}},{"name":"parent","generated":{"line":85,"column":25},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":65,"column":10}},{"generated":{"line":85,"column":31},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":65,"column":16}},{"name":"parent","generated":{"line":85,"column":34},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":65,"column":19}},{"generated":{"line":85,"column":40},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":65,"column":25}},{"name":"children","generated":{"line":85,"column":41},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":65,"column":26}},{"generated":{"line":85,"column":49},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":65,"column":19}},{"name":"indexOf","generated":{"line":85,"column":50},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":65,"column":35}},{"generated":{"line":85,"column":57},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":65,"column":19}},{"name":"node","generated":{"line":85,"column":58},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":65,"column":43}},{"generated":{"line":85,"column":62},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":65,"column":19}},{"generated":{"line":85,"column":63},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":65,"column":16}},{"generated":{"line":85,"column":66},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":65,"column":51}},{"generated":{"line":85,"column":70},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":63,"column":22}},{"name":"parent","generated":{"line":85,"column":72},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":66,"column":10}},{"generated":{"line":85,"column":78},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":63,"column":22}},{"generated":{"line":85,"column":79},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":63,"column":8}},{"generated":{"line":86,"column":0},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":68,"column":7}},{"generated":{"line":87,"column":0},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":69,"column":5}},{"generated":{"line":87,"column":1},"source":"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js","original":{"line":31,"column":7}}],"sources":{"../node_modules/mdast-util-definitions/node_modules/unist-util-visit/index.js":"/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Invoked when a node (matching test, if given) is found.\n * Visitors are free to transform node.\n * They can also transform the parent of node (the last of ancestors).\n * Replacing node itself, if `SKIP` is not returned, still causes its descendants to be visited.\n * If adding or removing previous siblings (or next siblings, in case of reverse) of node,\n * visitor should return a new index (number) to specify the sibling to traverse after node is traversed.\n * Adding or removing next siblings of node (or previous siblings, in case of reverse)\n * is handled as expected without needing to return a new index.\n * Removing the children property of an ancestor still results in them being traversed.\n *\n * @template {Node} V\n * @callback Visitor\n * @param {V} node Found node\n * @param {number|null} index Position of `node` in `parent`\n * @param {Parent|null} parent Parent of `node`\n * @returns {VisitorResult}\n */\n\nimport {visitParents, CONTINUE, SKIP, EXIT} from 'unist-util-visit-parents'\n\nexport {CONTINUE, SKIP, EXIT}\n\nexport const visit =\n  /**\n   * @type {(\n   *   (<T extends Node>(tree: Node, test: T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>|Array.<T['type']|Partial<T>|import('unist-util-is').TestFunctionPredicate<T>>, visitor: Visitor<T>, reverse?: boolean) => void) &\n   *   ((tree: Node, test: Test, visitor: Visitor<Node>, reverse?: boolean) => void) &\n   *   ((tree: Node, visitor: Visitor<Node>, reverse?: boolean) => void)\n   * )}\n   */\n  (\n    /**\n     * Visit children of tree which pass a test\n     *\n     * @param {Node} tree Abstract syntax tree to walk\n     * @param {Test} test test Test node\n     * @param {Visitor<Node>} visitor Function to run for each node\n     * @param {boolean} [reverse] Fisit the tree in reverse, defaults to false\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array.<Parent>} parents\n       */\n      function overload(node, parents) {\n        var parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n"},"lineCount":null}},"error":null,"hash":"823155d2e0dc0d92bc7ab2452fcde0b5","cacheData":{"env":{}}}