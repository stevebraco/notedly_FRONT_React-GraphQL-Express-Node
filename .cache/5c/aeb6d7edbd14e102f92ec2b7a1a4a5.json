{"id":"7GRz","dependencies":[{"name":"/Users/steve/Documents/Projects/notedly_app/web/package.json","includedInParent":true,"mtime":1634550415413},{"name":"/Users/steve/Documents/Projects/notedly_app/web/.babelrc","includedInParent":true,"mtime":1634038347786},{"name":"/Users/steve/Documents/Projects/notedly_app/web/node_modules/unist-builder/package.json","includedInParent":true,"mtime":1634309499464}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.u=void 0;var r=function(r,e,t){var i={type:String(r)};return null!=t||\"string\"!=typeof e&&!Array.isArray(e)?Object.assign(i,e):t=e,Array.isArray(t)?i.children=t:null!=t&&(i.value=String(t)),i};exports.u=r;"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/unist-builder/index.js","original":{"line":16,"column":7},"generated":{"line":1,"column":0}},{"source":"../node_modules/unist-builder/index.js","original":{"line":16,"column":7},"generated":{"line":1,"column":13}},{"source":"../node_modules/unist-builder/index.js","original":{"line":16,"column":7},"generated":{"line":1,"column":20}},{"source":"../node_modules/unist-builder/index.js","original":{"line":16,"column":7},"generated":{"line":1,"column":35}},{"source":"../node_modules/unist-builder/index.js","original":{"line":16,"column":7},"generated":{"line":1,"column":43}},{"source":"../node_modules/unist-builder/index.js","original":{"line":16,"column":7},"generated":{"line":1,"column":56}},{"source":"../node_modules/unist-builder/index.js","original":{"line":16,"column":7},"generated":{"line":1,"column":57}},{"source":"../node_modules/unist-builder/index.js","original":{"line":16,"column":7},"generated":{"line":1,"column":64}},{"source":"../node_modules/unist-builder/index.js","original":{"line":16,"column":7},"generated":{"line":1,"column":68}},{"source":"../node_modules/unist-builder/index.js","original":{"line":16,"column":7},"generated":{"line":1,"column":76}},{"source":"../node_modules/unist-builder/index.js","original":{"line":16,"column":7},"generated":{"line":1,"column":83}},{"source":"../node_modules/unist-builder/index.js","original":{"line":16,"column":7},"generated":{"line":1,"column":85}},{"source":"../node_modules/unist-builder/index.js","name":"u","original":{"line":16,"column":11},"generated":{"line":1,"column":89}},{"source":"../node_modules/unist-builder/index.js","original":{"line":25,"column":2},"generated":{"line":1,"column":91}},{"source":"../node_modules/unist-builder/index.js","name":"type","original":{"line":25,"column":12},"generated":{"line":1,"column":100}},{"source":"../node_modules/unist-builder/index.js","name":"props","original":{"line":25,"column":18},"generated":{"line":1,"column":102}},{"source":"../node_modules/unist-builder/index.js","name":"value","original":{"line":25,"column":25},"generated":{"line":1,"column":104}},{"source":"../node_modules/unist-builder/index.js","name":"node","original":{"line":27,"column":8},"generated":{"line":1,"column":107}},{"source":"../node_modules/unist-builder/index.js","name":"node","original":{"line":27,"column":8},"generated":{"line":1,"column":111}},{"source":"../node_modules/unist-builder/index.js","original":{"line":27,"column":15},"generated":{"line":1,"column":113}},{"source":"../node_modules/unist-builder/index.js","name":"type","original":{"line":27,"column":16},"generated":{"line":1,"column":114}},{"source":"../node_modules/unist-builder/index.js","name":"String","original":{"line":27,"column":22},"generated":{"line":1,"column":119}},{"source":"../node_modules/unist-builder/index.js","name":"type","original":{"line":27,"column":29},"generated":{"line":1,"column":126}},{"source":"../node_modules/unist-builder/index.js","name":"node","original":{"line":44,"column":11},"generated":{"line":1,"column":130}},{"source":"../node_modules/unist-builder/index.js","original":{"line":30,"column":6},"generated":{"line":1,"column":137}},{"source":"../node_modules/unist-builder/index.js","name":"value","original":{"line":30,"column":7},"generated":{"line":1,"column":143}},{"source":"../node_modules/unist-builder/index.js","original":{"line":31,"column":24},"generated":{"line":1,"column":146}},{"source":"../node_modules/unist-builder/index.js","name":"props","original":{"line":31,"column":14},"generated":{"line":1,"column":163}},{"source":"../node_modules/unist-builder/index.js","name":"Array","original":{"line":31,"column":36},"generated":{"line":1,"column":167}},{"source":"../node_modules/unist-builder/index.js","name":"isArray","original":{"line":31,"column":42},"generated":{"line":1,"column":173}},{"source":"../node_modules/unist-builder/index.js","name":"props","original":{"line":31,"column":50},"generated":{"line":1,"column":181}},{"source":"../node_modules/unist-builder/index.js","name":"Object","original":{"line":35,"column":6},"generated":{"line":1,"column":184}},{"source":"../node_modules/unist-builder/index.js","name":"assign","original":{"line":35,"column":13},"generated":{"line":1,"column":191}},{"source":"../node_modules/unist-builder/index.js","name":"node","original":{"line":35,"column":20},"generated":{"line":1,"column":198}},{"source":"../node_modules/unist-builder/index.js","name":"props","original":{"line":35,"column":26},"generated":{"line":1,"column":200}},{"source":"../node_modules/unist-builder/index.js","name":"value","original":{"line":33,"column":6},"generated":{"line":1,"column":203}},{"source":"../node_modules/unist-builder/index.js","name":"props","original":{"line":33,"column":14},"generated":{"line":1,"column":205}},{"source":"../node_modules/unist-builder/index.js","name":"Array","original":{"line":38,"column":8},"generated":{"line":1,"column":207}},{"source":"../node_modules/unist-builder/index.js","name":"isArray","original":{"line":38,"column":14},"generated":{"line":1,"column":213}},{"source":"../node_modules/unist-builder/index.js","name":"value","original":{"line":38,"column":22},"generated":{"line":1,"column":221}},{"source":"../node_modules/unist-builder/index.js","name":"node","original":{"line":39,"column":6},"generated":{"line":1,"column":224}},{"source":"../node_modules/unist-builder/index.js","name":"children","original":{"line":39,"column":11},"generated":{"line":1,"column":226}},{"source":"../node_modules/unist-builder/index.js","name":"value","original":{"line":39,"column":22},"generated":{"line":1,"column":235}},{"source":"../node_modules/unist-builder/index.js","name":"value","original":{"line":40,"column":15},"generated":{"line":1,"column":237}},{"source":"../node_modules/unist-builder/index.js","name":"value","original":{"line":40,"column":15},"generated":{"line":1,"column":243}},{"source":"../node_modules/unist-builder/index.js","name":"node","original":{"line":41,"column":6},"generated":{"line":1,"column":247}},{"source":"../node_modules/unist-builder/index.js","name":"value","original":{"line":41,"column":11},"generated":{"line":1,"column":249}},{"source":"../node_modules/unist-builder/index.js","name":"String","original":{"line":41,"column":19},"generated":{"line":1,"column":255}},{"source":"../node_modules/unist-builder/index.js","name":"value","original":{"line":41,"column":26},"generated":{"line":1,"column":262}},{"source":"../node_modules/unist-builder/index.js","name":"node","original":{"line":44,"column":11},"generated":{"line":1,"column":266}},{"source":"../node_modules/unist-builder/index.js","original":{"line":16,"column":7},"generated":{"line":1,"column":269}},{"source":"../node_modules/unist-builder/index.js","original":{"line":16,"column":7},"generated":{"line":1,"column":277}},{"source":"../node_modules/unist-builder/index.js","original":{"line":16,"column":7},"generated":{"line":1,"column":279}}],"sources":{"../node_modules/unist-builder/index.js":"/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist').Literal} Literal\n * @typedef {Object.<string, unknown>} Props\n * @typedef {Array.<Node>|string} ChildrenOrValue\n *\n * @typedef {(<T extends string, P extends Record<string, unknown>, C extends Node[]>(type: T, props: P, children: C) => {type: T, children: C} & P)} BuildParentWithProps\n * @typedef {(<T extends string, P extends Record<string, unknown>>(type: T, props: P, value: string) => {type: T, value: string} & P)} BuildLiteralWithProps\n * @typedef {(<T extends string, P extends Record<string, unknown>>(type: T, props: P) => {type: T} & P)} BuildVoidWithProps\n * @typedef {(<T extends string, C extends Node[]>(type: T, children: C) => {type: T, children: C})} BuildParent\n * @typedef {(<T extends string>(type: T, value: string) => {type: T, value: string})} BuildLiteral\n * @typedef {(<T extends string>(type: T) => {type: T})} BuildVoid\n */\n\nexport var u = /**\n * @type {BuildVoid & BuildVoidWithProps & BuildLiteral & BuildLiteralWithProps & BuildParent & BuildParentWithProps}\n */ (\n  /**\n   * @param {string} type Type of node\n   * @param {Props|ChildrenOrValue} [props] Additional properties for node (or `children` or `value`)\n   * @param {ChildrenOrValue} [value] `children` or `value` of node\n   * @returns {Node}\n   */\n  function (type, props, value) {\n    /** @type {Node} */\n    var node = {type: String(type)}\n\n    if (\n      (value === undefined || value === null) &&\n      (typeof props === 'string' || Array.isArray(props))\n    ) {\n      value = props\n    } else {\n      Object.assign(node, props)\n    }\n\n    if (Array.isArray(value)) {\n      node.children = value\n    } else if (value !== undefined && value !== null) {\n      node.value = String(value)\n    }\n\n    return node\n  }\n)\n"},"lineCount":null}},"error":null,"hash":"abe7e8c23bf332306cef2ba33e5aed2c","cacheData":{"env":{}}}