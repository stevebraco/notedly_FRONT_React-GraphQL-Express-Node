{"id":"Kp65","dependencies":[{"name":"/Users/steve/Documents/Projects/notedly_app/web/package.json","includedInParent":true,"mtime":1634550415413},{"name":"/Users/steve/Documents/Projects/notedly_app/web/.babelrc","includedInParent":true,"mtime":1634038347786},{"name":"/Users/steve/Documents/Projects/notedly_app/web/node_modules/parse-entities/package.json","includedInParent":true,"mtime":1634309500149}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.decodeEntity=n;var e,t=59;function n(n){var r,o=\"&\"+n+\";\";return(e=e||document.createElement(\"i\")).innerHTML=o,((r=e.textContent).charCodeAt(r.length-1)!==t||\"semi\"===n)&&(r!==o&&r)}"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/parse-entities/decode-entity.browser.js","original":{"line":32,"column":1},"generated":{"line":1,"column":0}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","original":{"line":32,"column":1},"generated":{"line":1,"column":13}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","original":{"line":32,"column":1},"generated":{"line":1,"column":20}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","original":{"line":32,"column":1},"generated":{"line":1,"column":35}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","original":{"line":32,"column":1},"generated":{"line":1,"column":43}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","original":{"line":32,"column":1},"generated":{"line":1,"column":56}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","original":{"line":32,"column":1},"generated":{"line":1,"column":57}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","original":{"line":32,"column":1},"generated":{"line":1,"column":64}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","original":{"line":32,"column":1},"generated":{"line":1,"column":68}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","original":{"line":32,"column":1},"generated":{"line":1,"column":76}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","original":{"line":32,"column":1},"generated":{"line":1,"column":89}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","original":{"line":3,"column":0},"generated":{"line":1,"column":91}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","name":"element","original":{"line":5,"column":4},"generated":{"line":1,"column":95}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","name":"semicolon","original":{"line":3,"column":4},"generated":{"line":1,"column":97}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","original":{"line":3,"column":16},"generated":{"line":1,"column":99}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","original":{"line":11,"column":7},"generated":{"line":1,"column":102}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","name":"decodeEntity","original":{"line":11,"column":16},"generated":{"line":1,"column":111}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","name":"characters","original":{"line":11,"column":29},"generated":{"line":1,"column":113}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","name":"entity","original":{"line":12,"column":6},"generated":{"line":1,"column":116}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","name":"char","original":{"line":14,"column":6},"generated":{"line":1,"column":120}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","name":"entity","original":{"line":12,"column":6},"generated":{"line":1,"column":122}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","original":{"line":12,"column":15},"generated":{"line":1,"column":124}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","name":"characters","original":{"line":12,"column":21},"generated":{"line":1,"column":128}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","original":{"line":12,"column":34},"generated":{"line":1,"column":130}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","name":"char","original":{"line":26,"column":6},"generated":{"line":1,"column":134}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","name":"element","original":{"line":16,"column":2},"generated":{"line":1,"column":141}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","name":"element","original":{"line":16,"column":12},"generated":{"line":1,"column":143}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","name":"document","original":{"line":16,"column":23},"generated":{"line":1,"column":146}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","name":"createElement","original":{"line":16,"column":32},"generated":{"line":1,"column":155}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","original":{"line":16,"column":46},"generated":{"line":1,"column":169}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","name":"innerHTML","original":{"line":17,"column":10},"generated":{"line":1,"column":175}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","name":"entity","original":{"line":17,"column":22},"generated":{"line":1,"column":185}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","name":"char","original":{"line":18,"column":2},"generated":{"line":1,"column":189}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","name":"element","original":{"line":18,"column":9},"generated":{"line":1,"column":191}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","name":"textContent","original":{"line":18,"column":17},"generated":{"line":1,"column":193}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","name":"charCodeAt","original":{"line":26,"column":11},"generated":{"line":1,"column":206}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","name":"char","original":{"line":26,"column":22},"generated":{"line":1,"column":217}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","name":"length","original":{"line":26,"column":27},"generated":{"line":1,"column":219}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","original":{"line":26,"column":36},"generated":{"line":1,"column":226}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","name":"semicolon","original":{"line":26,"column":43},"generated":{"line":1,"column":231}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","original":{"line":26,"column":71},"generated":{"line":1,"column":234}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","name":"characters","original":{"line":26,"column":56},"generated":{"line":1,"column":243}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","name":"char","original":{"line":31,"column":9},"generated":{"line":1,"column":248}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","name":"entity","original":{"line":31,"column":18},"generated":{"line":1,"column":252}},{"source":"../node_modules/parse-entities/decode-entity.browser.js","name":"char","original":{"line":31,"column":35},"generated":{"line":1,"column":255}}],"sources":{"../node_modules/parse-entities/decode-entity.browser.js":"/* eslint-env browser */\n\nvar semicolon = 59 // `;`\n/** @type {HTMLElement} */\nvar element\n\n/**\n * @param {string} characters\n * @returns {string|false}\n */\nexport function decodeEntity(characters) {\n  var entity = '&' + characters + ';'\n  /** @type {string} */\n  var char\n\n  element = element || document.createElement('i')\n  element.innerHTML = entity\n  char = element.textContent\n\n  // Some entities do not require the closing semicolon (`&not` - for instance),\n  // which leads to situations where parsing the assumed entity of `&notit;`\n  // will result in the string `Â¬it;`.\n  // When we encounter a trailing semicolon after parsing and the entity to\n  // decode was not a semicolon (`&semi;`), we can assume that the matching was\n  // incomplete\n  if (char.charCodeAt(char.length - 1) === semicolon && characters !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the entity was not valid\n  return char === entity ? false : char\n}\n"},"lineCount":null}},"error":null,"hash":"f081559b555fa4f81489b9840cf9f58f","cacheData":{"env":{}}}