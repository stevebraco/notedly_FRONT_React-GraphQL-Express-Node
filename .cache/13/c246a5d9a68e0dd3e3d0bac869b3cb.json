{"id":"../node_modules/zen-observable-ts/lib/bundle.esm.js","dependencies":[{"name":"/Users/steve/Documents/Projects/notedly_app/web/node_modules/zen-observable-ts/lib/bundle.esm.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/steve/Documents/Projects/notedly_app/web/package.json","includedInParent":true,"mtime":1634558757028},{"name":"/Users/steve/Documents/Projects/notedly_app/web/.babelrc","includedInParent":true,"mtime":1634038347786},{"name":"/Users/steve/Documents/Projects/notedly_app/web/node_modules/zen-observable-ts/package.json","includedInParent":true,"mtime":1634309499136},{"name":"zen-observable","loc":{"line":1,"column":26},"parent":"/Users/steve/Documents/Projects/notedly_app/web/node_modules/zen-observable-ts/lib/bundle.esm.js","resolved":"/Users/steve/Documents/Projects/notedly_app/web/node_modules/zen-observable/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.Observable = void 0;\n\nvar _zenObservable = _interopRequireDefault(require(\"zen-observable\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Observable = _zenObservable.default;\nexports.Observable = Observable;\nvar _default = Observable;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/zenObservable.ts","name":null,"original":{"line":17,"column":13},"generated":{"line":12,"column":4}},{"source":"../src/zenObservable.ts","name":null,"original":{"line":17,"column":23},"generated":{"line":12,"column":14}},{"source":"../src/zenObservable.ts","name":null,"original":{"line":23,"column":9},"generated":{"line":12,"column":17}}],"sources":{"../src/zenObservable.ts":"/* tslint:disable */\n\nimport zenObservable from 'zen-observable';\n\nnamespace Observable {\n\n}\n\nimport { ZenObservable } from './types';\n\nexport { ZenObservable };\n\nexport type Observer<T> = ZenObservable.Observer<T>;\nexport type Subscriber<T> = ZenObservable.Subscriber<T>;\nexport type ObservableLike<T> = ZenObservable.ObservableLike<T>;\n\nexport const Observable: {\n  new <T>(subscriber: Subscriber<T>): Observable<T>;\n  from<R>(\n    observable: Observable<R> | ZenObservable.ObservableLike<R> | ArrayLike<R>,\n  ): Observable<R>;\n  of<R>(...args: Array<R>): Observable<R>;\n} = <any>zenObservable;\n\nexport interface Observable<T> {\n  subscribe(\n    observerOrNext: ((value: T) => void) | ZenObservable.Observer<T>,\n    error?: (error: any) => void,\n    complete?: () => void,\n  ): ZenObservable.Subscription;\n\n  forEach(fn: (value: T) => void): Promise<void>;\n\n  map<R>(fn: (value: T) => R): Observable<R>;\n\n  filter(fn: (value: T) => boolean): Observable<T>;\n\n  reduce<R = T>(\n    fn: (previousValue: R | T, currentValue: T) => R | T,\n    initialValue?: R | T,\n  ): Observable<R | T>;\n\n  flatMap<R>(fn: (value: T) => ZenObservable.ObservableLike<R>): Observable<R>;\n\n  from<R>(\n    observable: Observable<R> | ZenObservable.ObservableLike<R> | ArrayLike<R>,\n  ): Observable<R>;\n  of<R>(...args: Array<R>): Observable<R>;\n}\n"},"lineCount":null}},"error":null,"hash":"3a2f3223462add404be3f6a0e3115b38","cacheData":{"env":{}}}